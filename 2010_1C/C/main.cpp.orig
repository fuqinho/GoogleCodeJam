#include <iostream>
#include <sstream>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <algorithm>
#include <cstdio>
#include <cmath>
#include <cstring>
using namespace std;

typedef vector<int> VI;
typedef vector<VI> VVI;
typedef vector<string> VS;
typedef pair<int, int> PII;
typedef long long LL;
#define ALL(a)  (a).begin(),(a).end()
#define REP(i,n) for(int i=0;i<(n);++i)
const double EPS = 1e-10;
const double PI  = acos(-1.0);
#define dump(x) cerr << "  (L" << __LINE__ << ") " << #x << " = " << (x) << endl;
#define dumpv(x) cerr << "  (L" << __LINE__ << ") " << #x << " = "; REP(q,(x).size()) cerr << (x)[q] << " "; cerr << endl;
template<typename T1, typename T2>
ostream& operator<<(ostream& s, const pair<T1, T2>& d) {return s << "(" << d.first << "," << d.second << ")";}

int char2int(int c) {
  if (c >= '0' && c <= '9') return c - '0';
  else return c - 'A' + 10;
}

map<int, int> solve(int M, int N, vector<string>& B) {
  vector<vector<bool> > board(M, vector<bool>(N));
  for (int i = 0; i < M; i++) {
    for (int j = 0; j < N; j++) {
      if (char2int(B[i][j/4]) & (1 << (3-j%4))) board[i][j] = true;
    }
  }

  vector<vector<bool> > cells0(M, vector<bool>(N));
  vector<vector<bool> > cells1(M, vector<bool>(N));
  for (int i = 0; i < M; i++) {
    for (int j = 0; j < N; j++) {
      cells0[i][j] = ((i+j)%2 == 0 ? !board[i][j] : board[i][j]);
      cells1[i][j] = ((i+j)%2 == 0 ? board[i][j] : !board[i][j]);
    }
  }

  /*
  cerr << "=======================" << endl;
  REP(i, M) {
    REP(j, N) cerr << (cells0[i][j] ? ' ' : 'x');
    cerr << '|' << endl;
  }
  cerr << "=======================" << endl;
  REP(i, M) {
    REP(j, N) cerr << (cells1[i][j] ? ' ' : 'x');
    cerr << '|' << endl;
  }
  */
  
  vector<vector<int> > dp0(M, vector<int>(N));
  vector<vector<int> > dp1(M, vector<int>(N));

  map<int, int> res;
  while (true) {
    int max_size = 0, max_i, max_j;
    vector<pair<int, int> > pos;
    for (int i = 0; i < M; i++) {
      dp0[i][0] = cells0[i][0] ? 1 : 0;
      dp1[i][0] = cells1[i][0] ? 1 : 0;
    }
    for (int j = 0; j < N; j++) {
      dp0[0][j] = cells0[0][j] ? 1 : 0;
      dp1[0][j] = cells1[0][j] ? 1 : 0;
    }
    for (int i = 1; i < M; i++) for (int j = 1; j < N; j++) {
      dp0[i][j] = cells0[i][j] ? min(dp0[i-1][j-1], min(dp0[i-1][j], dp0[i][j-1])) + 1 : 0;
      dp1[i][j] = cells1[i][j] ? min(dp1[i-1][j-1], min(dp1[i-1][j], dp1[i][j-1])) + 1 : 0;
      if (dp0[i][j] > max_size) {
        max_size = dp0[i][j];
        max_i = i - max_size + 1;
        max_j = j - max_size + 1;
      }
      if (dp1[i][j] > max_size) {
        max_size = dp1[i][j];
        max_i = i - max_size + 1;
        max_j = j - max_size + 1;
      }
    }

    if (max_size > 1) {
      for (int i = max_i; i < max_i + max_size; i++) {
        for (int j = max_j; j < max_j + max_size; j++) {
          cells0[i][j] = false;
          cells1[i][j] = false;
        }
      }
      res[max_size]++;
      /*
      cerr << "=======================" << endl;
      REP(i, M) {
        REP(j, N) cerr << (cells0[i][j] ? ' ' : 'x');
        cerr << '|' << endl;
      }
      */
    } else {
      break;
    }
  }

  REP(i, M) REP(j, N) {
    if (cells0[i][j] || cells1[i][j]) res[1]++;
  }


  /*
  REP(i, M) {
    REP(j, N) printf("%02d ", dp[i][j]);//cout << dp[i][j];
    cout << endl;
  }
  */
  
  
  return res;
}

int main() {
  int T; cin >> T;
  for (int t = 0; t < T; t++) {
    int M, N; cin >> M >> N;
    vector<string> B(M);
    for (int i = 0; i < M; i++) cin >> B[i];

    map<int, int> ans = solve(M, N, B);
    cout << "Case #" << t+1 << ": " << ans.size() << endl;
    for (map<int, int>::reverse_iterator i = ans.rbegin(); i != ans.rend(); i++) {
      cout << (*i).first << " " << (*i).second << endl;
    }
  }
}

